#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;
layout (location = 3) in ivec4 BoneIDs;
layout (location = 4) in vec4 Weights;

const int MAX_BONES = 100;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 transInversMatrix; // Calculations from CPU
uniform mat4 gBones[MAX_BONES];
uniform int nAnim;


out vec3 FragPos;  
out vec3 Normal;
out vec2 TexCoords;

void main()
{
	mat4 BoneTransform;
	vec4 PosL, NormalL;
	
	if (nAnim == 0){
		PosL    = vec4(position, 1.0);
		NormalL = vec4(mat3(transInversMatrix) * normal, 0.0);
		//NormalL   =  vec4(mat3(transpose(inverse(model))) * normal, 0.0);
	} else {
		BoneTransform = gBones[BoneIDs[0]] * Weights[0];
		BoneTransform     += gBones[BoneIDs[1]] * Weights[1];
		BoneTransform     += gBones[BoneIDs[2]] * Weights[2];
		BoneTransform     += gBones[BoneIDs[3]] * Weights[3];
		
		PosL  	   =  BoneTransform * vec4(position, 1.0) ;
		NormalL   =  vec4(mat3(transInversMatrix) * normal, 0.0) * BoneTransform;	
		//NormalL   =  vec4(mat3(transpose(inverse(model))) * normal, 0.0) * BoneTransform;
	}
	
    gl_Position    = projection * view * model * PosL;
	FragPos = vec3((model * vec4(position, 1.0f)));
	Normal = NormalL.xyz;
    TexCoords = texCoords;
}