#version 330 core

struct PointLight { 
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct DirLight {
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

struct SpotLight {    
    vec3 position;
	vec3 direction;
	
	float constant;
    float linear;
    float quadratic; 
	
	//For FlashLight
    float cutOff;
	float outerCutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

#define NR_POINT_LIGHTS 2

in VS_OUT {
    vec3 FragPos;
    vec2 TexCoords;
	vec3 Normal; //To mantain compatibility with no normal maps
    mat3 TBN;
} fs_in; 

out vec4 color;

uniform vec3 viewPos;
uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform DirLight dirLight;
uniform SpotLight spotLight;

uniform sampler2D texture_diffuse;
uniform sampler2D texture_specular;
uniform sampler2D texture_opaque;
uniform sampler2D texture_normal;

uniform bool is_opaque;
uniform bool is_tex_normal;

uniform float material_shininess;

vec3 CalcPointLight(PointLight light, sampler2D mdiffuse, sampler2D mspecular, float mshininess, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);

void main()
{
	vec4 texColor = texture(texture_diffuse, fs_in.TexCoords);
	vec4 texOpaqueColor = texture(texture_opaque, fs_in.TexCoords);
	
	//Fragments with alfa value
	if(texColor.a < 0.1)
        discard;
	
	//Fragments with an opaque map. Avoid doing innecessary calcs
	if (is_opaque && texOpaqueColor.r == 0.0 && texOpaqueColor.g == 0.0 && texOpaqueColor.b == 0.0 )
		discard;
	
	// Properties
	vec3 result = vec3(0.0);//needs an initial value or model won't render correctly
	vec3 viewDir = normalize(viewPos - fs_in.FragPos);
	vec3 norm;
	
	if (is_tex_normal){
		norm = texture(texture_normal, fs_in.TexCoords).rgb;
		norm = normalize(norm * 2.0 - 1.0);   
		norm = normalize(fs_in.TBN * norm);
	} else {
		norm = normalize(fs_in.Normal);
	}
	 
	// Phase 1: Directional lighting
    result = CalcDirLight(dirLight, norm, viewDir);
	//Point lights
	for(int i = 0; i < NR_POINT_LIGHTS; i++)
	result += CalcPointLight(pointLights[i], texture_diffuse, texture_specular, material_shininess, norm, fs_in.FragPos, viewDir);
	// Phase 3: Spot light
    result += CalcSpotLight(spotLight, norm, fs_in.FragPos, viewDir);  
	
	//Alpha 0 is transparent, 1 is opaque
	if (is_opaque){
		//If we have opaque values, we merge them correctly
		//Black must be transparent and white opaque
		float alphaOpaque = (texOpaqueColor.r + texOpaqueColor.g + texOpaqueColor.b) / 3.0;
		color = vec4(result, alphaOpaque);
	} else {
		color = vec4(result, 1.0);
	}
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material_shininess);
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse, fs_in.TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse, fs_in.TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular, fs_in.TexCoords));
    return (ambient + diffuse + specular);
}  

// Calculates the color when using a point light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    
	// Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material_shininess);
    
	// Attenuation
    float distance    = length(light.position - fragPos);
    float attenuation = 1.0f / (light.constant + light.linear * distance + 
  			     light.quadratic * (distance * distance));    
    
	// Combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse, fs_in.TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse, fs_in.TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(texture_specular, fs_in.TexCoords));
    
	// Check if lighting is inside the spotlight cone
    float theta = dot(lightDir, normalize(-light.direction));
	float epsilon   = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); 
	
	//Atenuattion for spotlight cone
	diffuse  *= intensity;
	specular *= intensity;
	
	ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
	
    return (ambient + diffuse + specular);
}

// Calculates the color when using a point light.
vec3 CalcPointLight(PointLight light, sampler2D mdiffuse, sampler2D mspecular, float mshininess, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	// Diffuse shading
	float diff = max(dot(normal, lightDir), 0.0);
	// Specular shading
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), mshininess);
	// Attenuation
	float distance = length(light.position - fragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance)); 
	// Combine results
	vec3 ambient = light.ambient * vec3(texture(mdiffuse, fs_in.TexCoords));
	vec3 diffuse = light.diffuse * diff * vec3(texture(mdiffuse, fs_in.TexCoords));
	vec3 specular = light.specular * spec * vec3(texture(mspecular, fs_in.TexCoords));
	ambient *= attenuation;
	diffuse *= attenuation;
	specular *= attenuation;
	return (ambient + diffuse + specular);
}