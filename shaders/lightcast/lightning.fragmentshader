#version 330 core


struct Material {
    float shininess;
}; 

struct Light {
	//Light position for point light
	vec3 position;  
	//Light direction for directional light
	vec3 direction;
	//For FlashLight
    float cutOff;
	float outerCutOff;
    
	//Light properties
	vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	//Light attenuation for point light
	float constant;
    float linear;
    float quadratic;
};


in vec3 Normal; 
in vec3 FragPos; 
in vec2 TexCoords;
  
out vec4 color;
 
uniform vec3 viewPos;
uniform Material material;
uniform Light light;  

//Properties of material out of Material struct
uniform sampler2D materialdiffuse;
uniform sampler2D materialspecular;


void main(){
	
	//For directional light we use the light direction only
	//vec3 lightDir = normalize(-light.direction);
	//For point light
	vec3 lightDir = normalize(light.position - FragPos);
	
	//calculating diffuse light
	vec3 norm = normalize(Normal); 

	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(materialdiffuse, TexCoords));  
	
	//Calculate ambientLight
	vec3 ambient = light.ambient * vec3(texture(materialdiffuse, TexCoords));
	
	//Calculate specular light
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32); 
	vec3 specular = light.specular * spec * vec3(texture(materialspecular, TexCoords));
	
	//For point lights
	float distance    = length(light.position - FragPos);
	float attenuation = 1.0f / (light.constant + light.linear * distance + 
				light.quadratic * (distance * distance)); 
				
	// Check if lighting is inside the spotlight cone
    float theta = dot(lightDir, normalize(-light.direction));
	float epsilon   = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0); 
	//Atenuattion for spotlight cone
	diffuse  *= intensity;
	specular *= intensity;
	
	//Atenuation for point lights
	ambient  *= attenuation; 
	diffuse  *= attenuation;
	specular *= attenuation;
	
	
	vec3 result = ambient + diffuse + specular;
	color = vec4(result, 1.0f);
	
}